
import numpy as np
from .pyramid import Pyramid
from .filters import steerable_filters
from .c.wrapper import corrDn, upConv

from matplotlib import cm
from .pyr_utils import LB2idx


class SteerablePyramidOld(Pyramid):
    def __init__(self, image, height='auto', filt='sp1Filters',
                 edgeType='reflect1'):
        """Steerable pyramid. image parameter is required, others are optional
        - `image` - a 2D numpy array
        - `height` - an integer denoting number of pyramid levels desired.  'auto' (default) uses
        maxPyrHt from pyPyrUtils.
        - `filter` - The name of one of the steerable pyramid filters in pyPyrUtils:
        `'sp0Filters'`, `'sp1Filters'`, `'sp3Filters'`, `'sp5Filters'`.  Default is `'sp1Filters'`.
        - `edgeType` - see class Pyramid.__init__()
        """
        super().__init__(image=image, edgeType=edgeType)

        self.filt = steerable_filters(filt)
        self.pyrType = 'Steerable'

        filters   = self.filt # temporary hack...
        harmonics = filters['harmonics']
        lo0filt   = filters['lo0filt']
        hi0filt   = filters['hi0filt']
        lofilt    = filters['lofilt']
        bfilts    = filters['bfilts']
        steermtx  = filters['mtx']

        max_ht = self.maxPyrHt(self.image.shape, lofilt.shape)
        if height == 'auto':
            ht = max_ht
        elif height > max_ht:
            raise Exception("cannot build pyramid higher than %d levels." % (max_ht))
        else:
            ht = int(height)

        nbands = bfilts.shape[1]

        self.pyr = []
        self.pyrSize = []
        for n in range((ht*nbands)+2):
            self.pyr.append([])
            self.pyrSize.append([])

        im     = self.image
        im_sz  = im.shape
        pyrCtr = 0

        hi0 = corrDn(image = im, filt = hi0filt, edges = self.edgeType);

        self.pyr[pyrCtr] = hi0
        self.pyrSize[pyrCtr] = hi0.shape

        pyrCtr += 1

        lo = corrDn(image = im, filt = lo0filt, edges = self.edgeType)
        for i in range(ht):
            lo_sz = lo.shape
            # assume square filters  -- start of buildSpyrLevs
            bfiltsz = int(np.floor(np.sqrt(bfilts.shape[0])))

            for b in range(bfilts.shape[1]):
                filt = bfilts[:,b].reshape(bfiltsz,bfiltsz).T
                band = corrDn(image = lo, filt = filt, edges = self.edgeType)
                self.pyr[pyrCtr] = np.array(band)
                self.pyrSize[pyrCtr] = (band.shape[0], band.shape[1])
                pyrCtr += 1

            lo = corrDn(image = lo, filt = lofilt, edges = self.edgeType, step = (2,2))

        self.pyr[pyrCtr] = np.array(lo)
        self.pyrSize[pyrCtr] = lo.shape
